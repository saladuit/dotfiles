" **************************************************************************** "
"                                                                              "
"                                                     .--.  _                  "
"    .myvimrc                                        |o_o || |                 "
"                                                    |:_/ || |_ _   ___  __    "
"    By: safoh <safoh@student.codam.nl>             //   \ \ __| | | \ \/ /    "
"                                                  (|     | )|_| |_| |>  <     "
"    Created: 2022/02/01 16:06:33 by safoh        /'\_   _/`\__|\__,_/_/\_\    "
"    Updated: 2022/02/01 16:09:42 by safoh        \___)=(___/                  "
"                                                                              "
" **************************************************************************** "

"basic
syntax on							"enables programming syntax"
set number							"enables numberlines"
set rnu!
set mouse=a							"mouse support"
set showcmd							"always shows the commandline"
set wildmenu"better completion"
set conceallevel=0					"fixes markdown files"
set spelllang=en_uk					"set language for spellchecking"
set confirm							"asks to save when closing a file"
set nowrap							"display lines longer than the width as one line"
set smarttab						"tt will look at the tab space"

"editing
set autoindent						"automatically indents based on the previous line"
set backspace=indent,eol,start
set nospell							"enable spellchecking"
set clipboard=unnamedplus			"clipboard management"
set scrolloff=3						"keep 3 lines visible above/below the cursor when scrolling"
set sidescrolloff=7					"keep 7 characters visible to the left/right of the cursor when scrolling"
set sidescroll=1					"scroll left/right one character at a time"
set complete=i

"visual
set background=dark					"set the background color"
:setlocal list						"Shows specific characters instead of tabs, spaces, etc."
set listchars=eol:↓,tab:··▸,trail:●,extends:…,precedes:…,space:·
set cursorline						"shows a line under the active line"
set ruler							"shows cursor coordinates in the corner"
set pumheight=10					"smaller popup menus"
set splitbelow						"split below if vertical"
set splitright						"split to the right if horizontal"
set t_Co=256						"sets amount of colors"
set showtabline=0					"show tabs if multiple buffers opened"
set noshowmode						"Removes the lower line since it is in our powerbar"

"advanced
set dir=~/tmp,/tmp					"store swap files in $HOME/tmp or /tmp, whichever is available"

"Keyboard Remaps"
nnoremap <C-t> :NERDTreeToggle<CR>											"Toggles the directory tree"
nnoremap <space> :CocCommand explorer<CR>									"Toggles the other Directory tree"
nnoremap <C-c> :bd<CR>														"Deletes the active buffer"
nnoremap <C-a> :ene<CR>														"Opens a new buffer"
nnoremap <C-i> :tabp<CR>													"Next Tab"
nnoremap <C-o> :tabn<CR>													"Previous Tab"
nnoremap <C-y> :bp<CR>														"Previous Buffer"
nnoremap <C-u> :bn<CR>														"Next Buffer"
nnoremap <C-f> :CtrlP<CR>													"File Finder"
nnoremap <C-s> :tabm -1<CR>													"Move active tab to left"
nnoremap <C-d> :tabm +1<CR>													"Move active tab to right"
nnoremap <C-n> :vs<CR>														"Vertical Split"
nnoremap <C-b> :split<CR>													"Horizontal Split"
nnoremap <C-x> :FloatermNew --autoclose=2 --wintype=split --height=0.3<CR>
nnoremap <C-q> :q<CR>														"Close active buffer"
nnoremap <C-e> :set rnu!<CR>												"Toggle Number Lines"
nnoremap <C-p> :setlocal list!<CR>											"Toggle Visible Tabs, Spaces, Etc."
nnoremap <A-j> :m .+1<CR>==
nnoremap <A-k> :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv
nnoremap <A-down> :m .+1<CR>==
nnoremap <A-up> :m .-2<CR>==
inoremap <A-down> <Esc>:m .+1<CR>==gi
inoremap <A-up> <Esc>:m .-2<CR>==gi
vnoremap <A-down> :m '>+1<CR>gv=gv
vnoremap <A-up> :m '<-2<CR>gv=gv

"Plug Plugins"
call plug#begin('~/.config/nvim/autoload/plugged')
Plug 'vim-airline/vim-airline'
Plug 'pbondoer/vim-42header'
"Plug 'simnalamburt/vim-mundo' not working at the moment
Plug 'voldikss/vim-floaterm'
Plug 'neoclide/coc.nvim' "echt nog een keer induiken
Plug 'jiangmiao/auto-pairs'
"NerdTree
Plug 'scrooloose/NERDTree'
Plug 'preservim/nerdcommenter'
Plug 'ryanoasis/vim-devicons'
"Syntastic
Plug 'vim-syntastic/syntastic'
"Rainbow
Plug 'frazrepo/vim-rainbow'
call plug#end()

"NerdTree"
autocmd BufWinEnter * silent NERDTreeMirror
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree')   && b:NERDTree.isTabTree() | quit | endif

let g:ctrlp_open_new_file='r'
let g:ctrlp_switch_buffer = 'Et'
let NERDTreeMapOpenInTab='<ENTER>'
let NERDTreeMapActivateNode='<SPACE>'
let g:airline#extensions#tabline#enabled = 1
let NERDTreeShowLineNumbers=1

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

"Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"Rainbow
let g:rainbow_active = 1

"Mundo
set undofile                        "for undo history tree"
set undodir=~/.vim/undo             "for undo history tree"

"auto-pairs
let g:AutoPairsFlyMode = 0
let g:AutoPairsShortcutBackInsert = '<M-b>'

"Coc.nvim
set nobackup                        "prevents vim from creating backup files"
set nowritebackup                   "other half of above setting"
set cmdheight=2                     "fix press enter to continue"
set updatetime=300                  "Faster Updating"
set shortmess+=c                    "Fixes something with completion menu"·

" Recently vim can merge signcolumn and number column into one
if has("nvim-0.5.0") || has("patch-8.1.1564")
  set signcolumn=number
else
  set signcolumn=yes
endif

"inoremap <silent><expr> <TAB>
      "\ pumvisible() ? "\<C-n>" :
      "\ <SID>check_back_space() ? "\<TAB>" :
      "\ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
